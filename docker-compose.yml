version: "3.9"

# ------------------------------------------------------------------------------
# COMPOSIZIONE DEI SERVIZI
# ------------------------------------------------------------------------------

services:

  # ---------------------------------------------------------------------------
  # FASTAPI + WORKER (8 WORKER PYTHON in background)
  # ---------------------------------------------------------------------------
  fastapi_app:
    build: .                                  # Dockerfile nella root
    container_name: fastapi_app
    ports:
      - "8000:8000"                           # Espone l’API su localhost:8000
    volumes:
      - .:/app                                # Monta tutto il progetto
      - ./tests_locust:/app/tests_locust      # Monta test Locust
    env_file:
      - .env                                  # File con variabili d’ambiente
    depends_on:
      pg_queue:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      influxdb_init:
        condition: service_completed_successfully
    command: >
      sh -c "
        gunicorn -w 8 -k uvicorn.workers.UvicornWorker main:app --bind 0.0.0.0:8000 --timeout 120 &
        python save_worker_pg.py &
        python save_worker_pg.py &
        python save_worker_pg.py &
        python save_worker_pg.py &
        python save_worker_pg.py &
        python save_worker_pg.py &
        python save_worker_pg.py &
        python save_worker_pg.py
        wait
      "

  # ---------------------------------------------------------------------------
  # POSTGRESQL per la coda asincrona
  # ---------------------------------------------------------------------------
  pg_queue:
    image: postgres:15
    container_name: pg_queue
    restart: always
    environment:
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
    ports:
      - "5432:5432"                           # Espone porta locale per debug
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Crea DB + tabella
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U api -d api_queue || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 15

  # ---------------------------------------------------------------------------
  # INFLUXDB OSS 2.7 per dati sensoriali e output modello
  # ---------------------------------------------------------------------------
  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminadmin
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 5s
      timeout: 3s
      retries: 10

  # ---------------------------------------------------------------------------
  # INFLUXDB INIT (Crea bucket "model_results" se non esiste)
  # ---------------------------------------------------------------------------
  influxdb_init:
    image: python:3.11-slim
    depends_on:
      influxdb:
        condition: service_healthy
    volumes:
      - ./init_influxdb.py:/init_influxdb.py
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
    command: >
      sh -c "
        pip install influxdb-client==1.41.0 &&
        python /init_influxdb.py
      "

# ------------------------------------------------------------------------------
# VOLUMI PERSISTENTI
# ------------------------------------------------------------------------------
volumes:
  pg_data:
  influxdb_data:
  mongodb_data:
